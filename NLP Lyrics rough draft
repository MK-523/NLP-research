import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from transformers import BertTokenizer, BertModel
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report


#get the data set
df = pd.read_csv("song_lyrics_dataset.csv")


#data preprocessing
nltk.download("punkt")
df["lyrics"] = df["lyrics"].apply(word_tokenize)


#testing and training sets
train_text, val_text, train_labels, val_labels = train_test_split(df["lyrics"], df["sentiment"], test_size=0.2, random_state=42)


#BERT token + model
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")
model = BertModel.from_pretrained("bert-base-uncased")


#beginning training of the sentiment analysis model
train_encodings = tokenizer(train_text, return_tensors="pt", padding=True, truncation=True, max_length=512)
val_encodings = tokenizer(val_text, return_tensors="pt", padding=True, truncation=True, max_length=512)


train_labels = torch.tensor(train_labels)
val_labels = torch.tensor(val_labels)


device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)


criterion = nn.CrossEntropyLoss()
optimizer = Adam(model.parameters(), lr=1e-5)


for epoch in range(5):
    model.train()
    total_loss = 0
    for batch in train_encodings:
        input_ids = batch["input_ids"].to(device)
        attention_mask = batch["attention_mask"].to(device)
        labels = batch["labels"].to(device)
        optimizer.zero_grad()
        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    print(f"Epoch {epoch+1}, Loss: {total_loss / len(train_encodings)}")


model.eval()


'''separate initiative: generation of lyrics/music'''
def generate_lyrics(artist_style, sentiment):
    #load the trained model
    model = GPT3Model.from_pretrained("gpt3")
    # fine tune the model with the lyrics
    # ...
    # generate lyrics
    # ...
    return generated_lyrics


#UI
def analyze_sentiment(lyrics):
    #preprocess
    # ...
    # prediction of the mood
    # ...
    return sentiment


def generate_lyrics_interface():
    artist_style = input("Enter artist style: ")
    sentiment = input("Enter sentiment (positive, negative, neutral): ")
    generated_lyrics = generate_lyrics(artist_style, sentiment)
    print(generated_lyrics)


#call back the entire user interface
generate_lyrics_interface()

